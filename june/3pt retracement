//@version=6
indicator("Three Point Retracement", shorttitle="3PT Retrace", overlay=true, max_bars_back=5000)

// Input section for date range
start_date = input.time(timestamp("01 Nov 2023"), "Start Date", confirm=true, group="DATE RANGE")
end_date = input.time(timestamp("28 Nov 2023"), "End Date", confirm=true, group="DATE RANGE")

// Options
use_close = input.bool(false, title="Use Close Values", group="OPTIONS", tooltip="Uses Close value as High and Low")
show_labels = input.bool(true, title="Show Labels", group="OPTIONS")
line_extend = input.string("Right", title="Extend Lines", options=["None", "Right", "Left", "Both"], group="OPTIONS")

// Colors
first_color = input.color(color.blue, title="First Point (0%)", group="COLORS")
second_color = input.color(color.red, title="Second Point (100%)", group="COLORS") 
mid_color = input.color(color.orange, title="Mid Point (50%)", group="COLORS")

// Variables to store our three points
var float first_price = na
var float second_price = na
var float mid_price = na
var int first_idx = na
var int second_idx = na
var int mid_idx = na
var bool is_uptrend = false  // Changed from 'na' to 'false'

// Arrays to store lines and labels
var line[] lines_array = array.new<line>()
var label[] labels_array = array.new<label>()

// Function to get bar index at specific time
getBarIndexAtTime(t) =>
    var int bi = na
    if time[1] <= t and time >= t and na(bi)
        bi := bar_index
    bi

// Function to clear previous drawings
clearDrawings() =>
    // Clear lines
    while array.size(lines_array) > 0
        line.delete(array.pop(lines_array))
    // Clear labels
    while array.size(labels_array) > 0
        label.delete(array.pop(labels_array))

// Get start and end bar indices
start_idx = getBarIndexAtTime(start_date)
end_idx = getBarIndexAtTime(end_date)

// Determine price source
price_high = use_close ? close : high
price_low = use_close ? close : low

// Find highest and lowest points in the date range
var float highest_price = na
var float lowest_price = na
var int highest_idx = na
var int lowest_idx = na

if time >= start_date and time <= end_date
    if na(highest_price) or price_high > highest_price
        highest_price := price_high
        highest_idx := bar_index
    if na(lowest_price) or price_low < lowest_price
        lowest_price := price_low
        lowest_idx := bar_index

// Determine chronological order and set first/second points
if not na(highest_idx) and not na(lowest_idx)
    if highest_idx < lowest_idx  // Highest point comes first
        first_price := highest_price
        first_idx := highest_idx
        second_price := lowest_price
        second_idx := lowest_idx
        is_uptrend := false  // Downtrend: high to low
    else  // Lowest point comes first
        first_price := lowest_price
        first_idx := lowest_idx
        second_price := highest_price
        second_idx := highest_idx
        is_uptrend := true   // Uptrend: low to high

// Calculate the middle point (50% retracement level)
if not na(first_price) and not na(second_price)
    mid_price := first_price + (second_price - first_price) * 0.5
    
    // Find the bar closest to the mid price within the date range
    var float closest_diff = na
    if time >= start_date and time <= end_date
        current_price = (price_high + price_low) / 2  // Use average of high and low
        current_diff = math.abs(current_price - mid_price)
        if na(closest_diff) or current_diff < closest_diff
            closest_diff := current_diff
            mid_idx := bar_index

// Draw lines and labels on the last bar
if barstate.islast and not na(start_idx) and not na(end_idx)
    clearDrawings()
    
    // Determine line extension
    line_ext = line_extend == "Right" ? extend.right : 
               line_extend == "Left" ? extend.left : 
               line_extend == "Both" ? extend.both : extend.none
    
    // Draw horizontal lines for each point
    if not na(first_price)
        first_line = line.new(x1=start_idx, y1=first_price, x2=end_idx, y2=first_price, color=first_color, width=2, style=line.style_solid, extend=line_ext)
        array.push(lines_array, first_line)
        
        if show_labels
            first_label_text = is_uptrend ? "Low First (0%)\n" + str.tostring(first_price, "#.####") : "High First (0%)\n" + str.tostring(first_price, "#.####")
            first_label = label.new(x=first_idx, y=first_price, text=first_label_text, color=first_color, textcolor=color.white, size=size.normal, style=label.style_label_down)
            array.push(labels_array, first_label)
    
    if not na(second_price)
        second_line = line.new(x1=start_idx, y1=second_price, x2=end_idx, y2=second_price, color=second_color, width=2, style=line.style_solid, extend=line_ext)
        array.push(lines_array, second_line)
        
        if show_labels
            second_label_text = is_uptrend ? "High Second (100%)\n" + str.tostring(second_price, "#.####") : "Low Second (100%)\n" + str.tostring(second_price, "#.####")
            second_label = label.new(x=second_idx, y=second_price, text=second_label_text, color=second_color, textcolor=color.white, size=size.normal, style=label.style_label_up)
            array.push(labels_array, second_label)
    
    if not na(mid_price)
        mid_line = line.new(x1=start_idx, y1=mid_price, x2=end_idx, y2=mid_price, color=mid_color, width=1, style=line.style_dashed, extend=line_ext)
        array.push(lines_array, mid_line)
        
        if show_labels
            mid_label = label.new(x=mid_idx, y=mid_price, text="Mid (50%)\n" + str.tostring(mid_price, "#.####"), color=mid_color, textcolor=color.white, size=size.normal, style=label.style_label_left)
            array.push(labels_array, mid_label)
    
    // Draw trend line connecting first and second points
    if not na(first_idx) and not na(second_idx)
        trend_line = line.new(x1=first_idx, y1=first_price, x2=second_idx, y2=second_price, color=color.gray, width=1, style=line.style_dotted, extend=extend.none)
        array.push(lines_array, trend_line)

// Create information table
var table info_table = table.new(position.top_right, 2, 4, bgcolor=color.new(color.white, 80), border_width=1)

if barstate.islast
    table.cell(info_table, 0, 0, "Level", text_color=color.black, bgcolor=color.new(color.gray, 70), text_size=size.small)
    table.cell(info_table, 1, 0, "Price", text_color=color.black, bgcolor=color.new(color.gray, 70), text_size=size.small)
    
    first_label_text = is_uptrend ? "Low First (0%)" : "High First (0%)"
    second_label_text = is_uptrend ? "High Second (100%)" : "Low Second (100%)"
    
    table.cell(info_table, 0, 1, first_label_text, text_color=first_color, text_size=size.small)
    table.cell(info_table, 1, 1, str.tostring(first_price, "#.####"), text_color=color.black, text_size=size.small)
    
    table.cell(info_table, 0, 2, "Mid (50%)", text_color=mid_color, text_size=size.small) 
    table.cell(info_table, 1, 2, str.tostring(mid_price, "#.####"), text_color=color.black, text_size=size.small)
    
    table.cell(info_table, 0, 3, second_label_text, text_color=second_color, text_size=size.small)
    table.cell(info_table, 1, 3, str.tostring(second_price, "#.####"), text_color=color.black, text_size=size.small)