//@version=6
indicator("Three Point Retracement", shorttitle="3PT Retrace", overlay=true, max_bars_back=5000)

// Input section for date range
start_date = input.time(timestamp("01 Nov 2023"), "Start Date", confirm=true, group="DATE RANGE")
end_date = input.time(timestamp("28 Nov 2023"), "End Date", confirm=true, group="DATE RANGE")

// Options
use_close = input.bool(false, title="Use Close Values", group="OPTIONS", tooltip="Uses Close value as High and Low")
show_labels = input.bool(true, title="Show Labels", group="OPTIONS")
show_array_lines = input.bool(true, title="Show Array Lines", group="OPTIONS")
line_extend = input.string("Right", title="Extend Lines", options=["None", "Right", "Left", "Both"], group="OPTIONS")

// Colors
first_color = input.color(color.blue, title="Ehlel tseg 0", group="COLORS")
second_color = input.color(color.red, title="Oroi tseg 1", group="COLORS") 
my_color = input.color(color.orange, title="my", group="COLORS")
third_color = input.color(color.green, title="Correction tseg", group="COLORS")
array_color = input.color(color.purple, title="Array Lines Color", group="COLORS")

// Variables to store our points
var float first_price = na
var float second_price = na
var float abc_buhel_price = na
var float third_price = na
var float initial_range = na
var float correction_ratio = na

var float[] abc_array = array.new<float>(0)

var int first_idx = na
var int second_idx = na
var int my_idx = na
var int third_idx = na
var bool is_uptrend = false

// Arrays to store lines and labels
var line[] lines_array = array.new<line>()
var label[] labels_array = array.new<label>()

// Function to get bar index at specific time
getBarIndexAtTime(t) =>
    var int bi = na
    if time[1] <= t and time >= t and na(bi)
        bi := bar_index
    bi

// Function to clear previous drawings
clearDrawings() =>
    while array.size(lines_array) > 0
        line.delete(array.pop(lines_array))
    while array.size(labels_array) > 0
        label.delete(array.pop(labels_array))

// Get start and end bar indices
start_idx = getBarIndexAtTime(start_date)
end_idx = getBarIndexAtTime(end_date)

// Determine price source
price_high = use_close ? close : high
price_low = use_close ? close : low

// Find highest and lowest points in the date range
var float highest_price = na
var float lowest_price = na
var int highest_idx = na
var int lowest_idx = na

if time >= start_date and time <= end_date
    if na(highest_price) or price_high > highest_price
        highest_price := price_high
        highest_idx := bar_index
    if na(lowest_price) or price_low < lowest_price
        lowest_price := price_low
        lowest_idx := bar_index

// Determine chronological order and set first/second points
if not na(highest_idx) and not na(lowest_idx)
    if highest_idx < lowest_idx
        first_price := highest_price
        first_idx := highest_idx
        second_price := lowest_price
        second_idx := lowest_idx
        is_uptrend := false
    else
        first_price := lowest_price
        first_idx := lowest_idx
        second_price := highest_price
        second_idx := highest_idx
        is_uptrend := true

// Find the third point AFTER the second point
var float third_point_price = na
var int third_point_idx = na

if not na(second_idx) and time >= start_date and time <= end_date and bar_index > second_idx
    if is_uptrend
        if na(third_point_price) or price_low < third_point_price
            third_point_price := price_low
            third_point_idx := bar_index
    else
        if na(third_point_price) or price_high > third_point_price
            third_point_price := price_high
            third_point_idx := bar_index

if not na(second_idx) and time >= start_date and time <= end_date and third_idx < second_idx
    if is_uptrend
        third_point_idx := bar_index
        third_point_price := price_low
    else
        third_point_idx := bar_index
        third_point_price := price_high

// Set the third price and index
third_price := third_point_price
third_idx := third_point_idx

// Calculate the mydle point
if not na(first_price) and not na(second_price) and not na(third_price)
    initial_range := math.abs(second_price - first_price)
    correction_ratio := math.abs(first_price - third_price) / initial_range
    tmp = 1 / correction_ratio
    array.clear(abc_array)

    abc_buhel_price := third_price + initial_range
    array.push(abc_array, third_price + tmp * initial_range)

    tmp_abc = tmp
    tmp_abc_1 = tmp

    if (is_uptrend)
        while tmp_abc > 2.1
            tmp_abc := tmp_abc / 2
            array.push(abc_array, third_price + (tmp_abc) * initial_range)
            
        while tmp_abc_1 < 15
            array.push(abc_array, third_price + (tmp_abc_1) * initial_range)
            tmp_abc_1 := tmp_abc_1 * 2
    else
        while tmp_abc > 2.1
            tmp_abc := tmp_abc / 2
            array.push(abc_array, third_price - (tmp_abc) * initial_range)
            
        while tmp_abc_1 < 15
            array.push(abc_array, third_price - (tmp_abc_1) * initial_range)
            tmp_abc_1 := tmp_abc_1 * 2


// Draw lines and labels on the last bar
if barstate.islast and not na(start_idx) and not na(end_idx)
    clearDrawings()
    line_ext = line_extend == "Right" ? extend.right : line_extend == "Left" ? extend.left : line_extend == "Both" ? extend.both : extend.none
    third_line_start = not na(second_idx) and not na(third_idx) ? math.max(second_idx, start_idx) : start_idx
    if not na(first_price)
        first_line = line.new(x1=start_idx, y1=first_price, x2=end_idx, y2=first_price, color=first_color, width=2, style=line.style_solid, extend=line_ext)
        array.push(lines_array, first_line)
        if show_labels
            first_label_text = is_uptrend ? str.tostring(first_price, "#.####") : str.tostring(first_price, "#.####")
            first_label = label.new(x=first_idx, y=first_price, text=first_label_text, color=first_color, textcolor=color.white, size=size.normal, style=label.style_label_down)
            array.push(labels_array, first_label)
    if not na(second_price)
        second_line = line.new(x1=start_idx, y1=second_price, x2=end_idx, y2=second_price, color=second_color, width=2, style=line.style_solid, extend=line_ext)
        array.push(lines_array, second_line)
        if show_labels
            second_label_text = is_uptrend ? str.tostring(second_price, "#.####") : str.tostring(second_price, "#.####")
            second_label = label.new(x=second_idx, y=second_price, text=second_label_text, color=second_color, textcolor=color.white, size=size.normal, style=label.style_label_up)
            array.push(labels_array, second_label)
    if not na(abc_buhel_price)
        my_line = line.new(x1=start_idx, y1=abc_buhel_price, x2=end_idx, y2=abc_buhel_price, color=my_color, width=1, style=line.style_solid, extend=line_ext)
        array.push(lines_array, my_line)
        if show_labels
            my_label = label.new(x=my_idx, y=abc_buhel_price, text="my (ABA)\n" + str.tostring(abc_buhel_price, "#.####"), color=my_color, textcolor=color.white, size=size.normal, style=label.style_label_left)
            array.push(labels_array, my_label)
    if not na(third_price)
        third_line = line.new(x1=third_line_start, y1=third_price, x2=end_idx, y2=third_price, color=third_color, width=2, style=line.style_solid, extend=line_ext)
        array.push(lines_array, third_line)
        if show_labels
            third_label_text = is_uptrend ? str.tostring(third_price, "#.####") : str.tostring(third_price, "#.####")
            third_label = label.new(x=third_idx, y=third_price, text=third_label_text, color=third_color, textcolor=color.white, size=size.normal, style=label.style_label_left)
            array.push(labels_array, third_label)
    if not na(first_idx) and not na(second_idx)
        trend_line = line.new(x1=first_idx, y1=first_price, x2=second_idx, y2=second_price, color=color.gray, width=1, style=line.style_dotted, extend=extend.none)
        array.push(lines_array, trend_line)
    if show_array_lines and array.size(abc_array) > 0
        for i = 0 to array.size(abc_array) - 1
            array_value = array.get(abc_array, i)
            current_array_color = i == 0 ? my_color : color.new(array_color, 0)
            line_width = i == 0 ? 2 : 1
            line_style = i == 0 ? line.style_solid : line.style_dashed
            array_line = line.new(x1=start_idx, y1=array_value, x2=end_idx, y2=array_value, color=current_array_color, width=line_width, style=line_style, extend=line_ext)
            array.push(lines_array, array_line)
            if show_labels and i > 0 and i < 6
                label_text = "Lvl" + str.tostring(i) + "\n" + str.tostring(array_value, "#.####")
                label_x = start_idx + math.round((end_idx - start_idx) * 0.1 * i)
                array_label = label.new(x=label_x, y=array_value, text=label_text, color=current_array_color, textcolor=color.white, size=size.small, style=label.style_label_right)
                array.push(labels_array, array_label)

// Create information table with expanded size for array info
var table info_table = table.new(position.top_right, 2, 15, bgcolor=color.new(color.white, 80), border_width=1)

if barstate.islast
    table.cell(info_table, 0, 0, "Level", text_color=color.black, bgcolor=color.new(color.gray, 70), text_size=size.small)
    table.cell(info_table, 1, 0, "Price", text_color=color.black, bgcolor=color.new(color.gray, 70), text_size=size.small)
    first_label_text = is_uptrend ? "Low First (0%)" : "High First (0%)"
    second_label_text = is_uptrend ? "High Second (100%)" : "Low Second (100%)"
    third_label_text = is_uptrend ? "2nd Low After High" : "2nd High After Low"
    table.cell(info_table, 0, 1, first_label_text, text_color=first_color, text_size=size.small)
    table.cell(info_table, 1, 1, str.tostring(first_price, "#.####"), text_color=color.black, text_size=size.small)
    table.cell(info_table, 0, 2, "ABA", text_color=my_color, text_size=size.small) 
    table.cell(info_table, 1, 2, str.tostring(abc_buhel_price, "#.####"), text_color=color.black, text_size=size.small)
    table.cell(info_table, 0, 3, second_label_text, text_color=second_color, text_size=size.small)
    table.cell(info_table, 1, 3, str.tostring(second_price, "#.####"), text_color=color.black, text_size=size.small)
    table.cell(info_table, 0, 4, third_label_text, text_color=third_color, text_size=size.small)
    table.cell(info_table, 1, 4, str.tostring(third_price, "#.####"), text_color=color.black, text_size=size.small)
    if array.size(abc_array) > 0
        table.cell(info_table, 0, 5, "─────────────", text_color=color.gray, text_size=size.small)
        table.cell(info_table, 1, 5, "─────────────", text_color=color.gray, text_size=size.small)
        table.cell(info_table, 0, 6, "Array Size", text_color=color.black, bgcolor=color.new(color.gray, 70), text_size=size.small)
        table.cell(info_table, 1, 6, str.tostring(array.size(abc_array)), text_color=color.black, text_size=size.small)
        max_display = math.min(array.size(abc_array), 8)
        for i = 0 to max_display - 1
            level_name = i == 0 ? "Base Level" : "Level " + str.tostring(i)
            table.cell(info_table, 0, 7 + i, level_name, text_color=array_color, text_size=size.small)
            table.cell(info_table, 1, 7 + i, str.tostring(array.get(abc_array, i), "#.####"), text_color=color.black, text_size=size.small)