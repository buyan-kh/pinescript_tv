//@version=6
indicator("Dynamic Horizontal Lines Calculator", overlay=true, max_lines_count=25)

// Input section
initial_price = input.float(3499.94, title="Initial Price", minval=0.01)

// Calculate values similar to Python function
b = initial_price / math.pow(10, str.length(str.tostring(int(initial_price))))
n = int(initial_price)
c = b

// Arrays to store calculated values
var line[] lines_array = array.new<line>()
var float[] values_array = array.new<float>()
var float[] green_values_array = array.new<float>()

// Function to clear previous lines
clear_lines() =>
    if array.size(lines_array) > 0
        for i = 0 to array.size(lines_array) - 1
            line.delete(array.get(lines_array, i))
        array.clear(lines_array)

// Calculate and draw lines on the last bar
if barstate.islast
    clear_lines()
    array.clear(values_array)
    array.clear(green_values_array)
    
    // Add initial price as first line
    initial_line = line.new(x1=bar_index - 100, y1=initial_price, x2=bar_index + 100, y2=initial_price, color=color.new(color.red, 20), width=2, style=line.style_solid, extend=extend.both)
    array.push(lines_array, initial_line)
    array.push(values_array, initial_price)
    
    // Add label for initial price
    label.new(x=bar_index + 10, y=initial_price, text="Initial: " + str.tostring(initial_price, "#.##"), color=color.red, textcolor=color.white, size=size.small, style=label.style_label_left)
    
    // Reset variables for blue lines calculation (original logic)
    temp_c = b
    
    // Create 10 blue horizontal lines based on original calculation
    for i = 0 to 9
        calculated_value = math.pow(math.sqrt(n) - temp_c, 2)
        
        // Store the calculated value
        array.push(values_array, calculated_value)
        
        // Create horizontal line
        new_line = line.new(x1=bar_index - 100, y1=calculated_value, x2=bar_index + 100, y2=calculated_value, color=color.new(color.blue, 30), width=1, style=line.style_solid, extend=extend.both)
        
        // Add line to array
        array.push(lines_array, new_line)
        
        // Add label to show the exact price
        label.new(x=bar_index + 10, y=calculated_value, text=str.tostring(calculated_value, "#.##"), color=color.blue, textcolor=color.white, size=size.small, style=label.style_label_left)
        
        // Update c for next iteration
        temp_c := temp_c + b
    
    // Reset variables for green lines calculation (new Python logic)
    // b = float("0." + initial) means b = 0.3201 when initial = 3201
    // This is the same as the blue calculation: initial_price / 10^(number of digits)
    green_b = b  // Same as blue calculation since it's the same formula
    
    temp_e = green_b
    
    // Create 10 green horizontal lines based on new calculation
    for i = 0 to 9
        green_calculated_value = math.pow(math.sqrt(n) + temp_e, 2)
        
        // Store the calculated value
        array.push(green_values_array, green_calculated_value)
        
        // Create horizontal line
        green_line = line.new(x1=bar_index - 100, y1=green_calculated_value, x2=bar_index + 100, y2=green_calculated_value, color=color.new(color.green, 30), width=1, style=line.style_solid, extend=extend.both)
        
        // Add line to array
        array.push(lines_array, green_line)
        
        // Add label to show the exact price
        label.new(x=bar_index - 20, y=green_calculated_value, text=str.tostring(green_calculated_value, "#.##"), color=color.green, textcolor=color.white, size=size.small, style=label.style_label_right)
        
        // Update e for next iteration
        temp_e := temp_e + green_b
    
    // Create table to display values
    var table values_table = table.new(position.middle_left, 3, 12, bgcolor=color.new(color.white, 10), border_width=4)
    
    // Table headers
    table.cell(values_table, 0, 0, "Level", text_color=color.black, bgcolor=color.new(color.gray, 30), text_size=size.small)
    table.cell(values_table, 1, 0, "Blue Lines", text_color=color.black, bgcolor=color.new(color.gray, 30), text_size=size.small)
    table.cell(values_table, 2, 0, "Green Lines", text_color=color.black, bgcolor=color.new(color.gray, 30), text_size=size.small)
    
    // Add initial price to table
    table.cell(values_table, 0, 1, "Initial", text_color=color.black, text_size=size.small)
    table.cell(values_table, 1, 1, str.tostring(initial_price, "#.####"), text_color=color.red, text_size=size.small)
    table.cell(values_table, 2, 1, str.tostring(initial_price, "#.####"), text_color=color.red, text_size=size.small)
    
    // Fill table with calculated values
    for i = 0 to 9
        if i < array.size(values_array) - 1 and i < array.size(green_values_array) // -1 because initial price is already in the array
            blue_value = array.get(values_array, i + 1) // +1 to skip initial price
            green_value = array.get(green_values_array, i)
            table.cell(values_table, 0, i + 2, str.tostring(i + 1), text_color=color.black, text_size=size.small)
            table.cell(values_table, 1, i + 2, str.tostring(blue_value, "#.####"), text_color=color.blue, text_size=size.small)
            table.cell(values_table, 2, i + 2, str.tostring(green_value, "#.####"), text_color=color.green, text_size=size.small)